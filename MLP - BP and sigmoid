import numpy as np

# Step 1: Define Sigmoid activation and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Step 2: Create input and output data
# Let's take N = 4 binary inputs for example
X = np.array([
    [0, 0, 0, 0],
    [0, 0, 1, 1],
    [0, 1, 0, 1],
    [1, 0, 0, 1],
    [1, 1, 1, 0]
])

# Output (for simplicity, just binary output 0 or 1)
y = np.array([[0], [1], [1], [1], [0]])

# Step 3: Initialize network parameters
input_size = 4
hidden_size1 = 5
hidden_size2 = 4
output_size = 1

# Random weights and biases
np.random.seed(1)  # For reproducibility
W1 = np.random.randn(input_size, hidden_size1)
b1 = np.random.randn(hidden_size1)

W2 = np.random.randn(hidden_size1, hidden_size2)
b2 = np.random.randn(hidden_size2)

W3 = np.random.randn(hidden_size2, output_size)
b3 = np.random.randn(output_size)

# Step 4: Training with backpropagation
epochs = 10000
learning_rate = 0.1

for epoch in range(epochs):
    # Forward Pass
    z1 = np.dot(X, W1) + b1
    a1 = sigmoid(z1)

    z2 = np.dot(a1, W2) + b2
    a2 = sigmoid(z2)

    z3 = np.dot(a2, W3) + b3
    output = sigmoid(z3)

    # Calculate loss (optional, for monitoring)
    loss = np.mean((y - output) ** 2)

    # Backward Pass
    error = y - output
    d_output = error * sigmoid_derivative(output)

    error_hidden2 = d_output.dot(W3.T)
    d_hidden2 = error_hidden2 * sigmoid_derivative(a2)

    error_hidden1 = d_hidden2.dot(W2.T)
    d_hidden1 = error_hidden1 * sigmoid_derivative(a1)

    # Update weights and biases
    W3 += a2.T.dot(d_output) * learning_rate
    b3 += np.sum(d_output, axis=0) * learning_rate

    W2 += a1.T.dot(d_hidden2) * learning_rate
    b2 += np.sum(d_hidden2, axis=0) * learning_rate

    W1 += X.T.dot(d_hidden1) * learning_rate
    b1 += np.sum(d_hidden1, axis=0) * learning_rate

    # Optional: print loss every 2000 epochs
    if epoch % 2000 == 0:
        print(f"Epoch {epoch}, Loss: {loss}")

# Step 5: Final Output
print("\nFinal Output after Training:")
print(output)

print("\nFinal Weights and Biases:")
print("\nW1:\n", W1)
print("\nb1:\n", b1)
print("\nW2:\n", W2)
print("\nb2:\n", b2)
print("\nW3:\n", W3)
print("\nb3:\n", b3)
