import heapq

# Function to read the undirected weighted graph and heuristic values from the user
def input_graph_and_heuristics():
    graph = {}
    heuristics = {}
    n = int(input("Enter the number of nodes in the graph: "))
    
    # Reading graph and heuristic values from user
    for i in range(n):
        node = input(f"Enter the name of node {i+1}: ")
        adj_nodes = input(f"Enter the adjacent nodes and weights for {node} (format: node:weight, node:weight): ").split(',')
        
        adj_list = {}
        for adj in adj_nodes:
            neighbor, weight = adj.split(':')
            adj_list[neighbor.strip()] = int(weight.strip())
        
        # Since it's an undirected graph, add the reverse edges too
        for neighbor in adj_list.keys():
            if neighbor not in graph:
                graph[neighbor] = {}
            graph[neighbor][node] = adj_list[neighbor]
        
        graph[node] = adj_list
        heuristic_value = float(input(f"Enter the heuristic value for node {node}: "))
        heuristics[node] = heuristic_value
    
    return graph, heuristics

# A* Search Algorithm function
def a_star_search(graph, heuristics, start_node, goal_node):
    # Initialize open list (priority queue) and closed list (visited nodes)
    open_list = []
    closed_list = set()
    
    # Add the start node to the open list with f(n) = g(n) + h(n)
    heapq.heappush(open_list, (heuristics[start_node], 0, start_node, None))  # (f(n), g(n), node, parent)
    
    # Dictionary to store the cost to reach each node
    g_costs = {start_node: 0}
    parents = {start_node: None}
    
    print("A* Search Traversal:")
    
    while open_list:
        # Pop the node with the smallest f(n) value
        f_n, g_n, current_node, parent = heapq.heappop(open_list)
        
        if current_node in closed_list:
            continue
        
        closed_list.add(current_node)
        
        # If we reached the goal node, reconstruct the path
        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node)
                current_node = parents[current_node]
            path.reverse()
            print("Path found:", path)
            return path
        
        # Explore neighbors
        for neighbor, weight in graph.get(current_node, {}).items():
            if neighbor in closed_list:
                continue
            
            tentative_g_cost = g_n + weight
            
            # If neighbor is not in open list or has a lower g_cost
            if neighbor not in g_costs or tentative_g_cost < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g_cost
                f_n = tentative_g_cost + heuristics[neighbor]  # f(n) = g(n) + h(n)
                heapq.heappush(open_list, (f_n, tentative_g_cost, neighbor, current_node))
                parents[neighbor] = current_node
    
    print("No path found.")
    return None

# Main function
def main():
    # Input the graph and heuristic values from the user
    graph, heuristics = input_graph_and_heuristics()
    
    print("\nGraph Representation (Adjacency List with Weights):")
    for node, adj in graph.items():
        print(f"{node}: {adj}")
    
    print("\nHeuristic Values:")
    for node, heuristic in heuristics.items():
        print(f"{node}: {heuristic}")
    
    # Perform A* Search from start to goal node
    start_node = input("\nEnter the starting node for A* Search: ")
    goal_node = input("Enter the goal node for A* Search: ")
    print(f"\nA* Search Traversal from '{start_node}' to '{goal_node}':")
    a_star_search(graph, heuristics, start_node, goal_node)

if __name__ == "__main__":
    main()


----------------------------------------INPUT---------------------------------------------------
Enter the number of nodes in the graph: 5
Enter the name of node 1: A
Enter the adjacent nodes and weights for A (format: node:weight, node:weight): B:1, C:4
Enter the name of node 2: B
Enter the adjacent nodes and weights for B (format: node:weight, node:weight): A:1, D:2
Enter the name of node 3: C
Enter the adjacent nodes and weights for C (format: node:weight, node:weight): A:4, D:3
Enter the name of node 4: D
Enter the adjacent nodes and weights for D (format: node:weight, node:weight): B:2, C:3, E:1
Enter the name of node 5: E
Enter the adjacent nodes and weights for E (format: node:weight, node:weight): D:1
Enter the heuristic value for node A: 2.0
Enter the heuristic value for node B: 1.0
Enter the heuristic value for node C: 3.0
Enter the heuristic value for node D: 4.0
Enter the heuristic value for node E: 0.0
